name: deploy-$(Build.SourceBranchName)-$(Date:dd-MMM-yyyy)
trigger: none
stages:
  - stage: Drupal_Dockerization
    displayName: Dockerization of Drupal and Push to Container Registry
    jobs:
      - job: Dockerization
        steps:
          - task: DownloadSecureFile@1
            displayName: Terraform init
            name: CertificateSSL
            inputs:
              secureFile: 'DigiCertGlobalRootCA.crt.pem'
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Agent.TempDirectory)'
              Contents: '*.pem'
              TargetFolder: '$(Build.Repository.LocalPath)'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                find sites/default/settings.php -exec sed -i -- "s/{user}/$(dbuser)/g" {} \;
                find sites/default/settings.php -exec sed -i -- "s/{pass}/$(dbpass)/g" {} \;
#                find settings.php -exec sed -i -- "s/{user}/$(dbuser)/g" {} \;
#                find settings.php -exec sed -i -- "s/{pass}/$(dbpass)/g" {} \;
          - task: Docker@2
            displayName: Dockerizing Drupal
            inputs:
              containerRegistry: 'druaprg'
              repository: 'acrdrupalsite'
              command: 'buildAndPush'
              Dockerfile: 'dockerfile'  
  - stage: Drupal_Deployment_K8s
    displayName: Drupal Deployment on K8s
    jobs:
      - deployment: Drupal_Deployment_K8s
        environment: Drupal-Deployment
        displayName: Drupal Deployment on K8s
        strategy:
          runOnce:
            deploy:  
               steps:
                 - checkout: self
                 - task: AzureCLI@2
                   displayName: 'Login to Accelerator cluster and deploy'
                   inputs:
                     azureSubscription: 'AzK8sConnect'
                     scriptType: bash
                     scriptLocation: inlineScript
                     inlineScript: |
                       ls -l
                       pwd
                       az aks install-cli
                       az aks get-credentials --resource-group Accelerator-RG --name  Accelerator-AKS --overwrite-existing
                       kubelogin convert-kubeconfig -l spn --client-id $servicePrincipalId --client-secret $servicePrincipalKey
                       find K8/k8deploy.yml -exec sed -i -- "s/{rev}/$(Build.BuildId)/g" {} \;
                       kubectl apply -f K8/k8deploy.yml
                     addSpnToEnvironment: true
                        